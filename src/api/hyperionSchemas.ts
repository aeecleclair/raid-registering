/**
 * Generated by @openapi-codegen
 *
 * @version 4.9.4
 */
export type AccessToken = {
  access_token: string;
  token_type: string;
};

/**
 * Various account types that can be created in Hyperion.
 * These values should match GroupType's. They are the lower level groups in Hyperion
 */
export type AccountType =
  | "student"
  | "former_student"
  | "staff"
  | "association"
  | "external"
  | "other_school_student"
  | "demo";

export type AdvertBase = {
  title: string;
  content: string;
  advertiser_id: string;
  tags?: string | null;
};

export type AdvertReturnComplete = {
  title: string;
  content: string;
  advertiser_id: string;
  tags?: string | null;
  id: string;
  advertiser: AdvertiserComplete;
  date?: string | null;
};

export type AdvertUpdate = {
  title?: string | null;
  content?: string | null;
  tags?: string | null;
};

export type AdvertiserBase = {
  name: string;
  /**
   * The group manager id should be a group identifier
   */
  group_manager_id: string;
};

export type AdvertiserComplete = {
  name: string;
  /**
   * The group manager id should be a group identifier
   */
  group_manager_id: string;
  id: string;
};

export type AdvertiserUpdate = {
  name?: string | null;
  group_manager_id?: string | null;
};

export type AmapSlotType = "midi" | "soir";

export type Applicant = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  account_type: AccountType;
  /**
   * @format uuid
   */
  school_id: string;
  email: string;
  promo?: number | null;
  phone?: string | null;
};

export type AssociationBase = {
  name: string;
  kind: Kinds;
  mandate_year: number;
  description?: string | null;
  associated_groups?: string[];
  /**
   * @default false
   */
  deactivated?: boolean;
};

export type AssociationComplete = {
  name: string;
  kind: Kinds;
  mandate_year: number;
  description?: string | null;
  associated_groups?: string[];
  /**
   * @default false
   */
  deactivated?: boolean;
  id: string;
};

export type AssociationEdit = {
  name?: string | null;
  kind?: Kinds | null;
  description?: string | null;
  mandate_year?: number | null;
};

export type AssociationGroupsEdit = {
  associated_groups?: string[];
};

export type BatchPurchase = {
  user_emails: string[];
  /**
   * @format uuid
   */
  product_variant_id: string;
  quantity: number;
};

/**
 * Return a dictionary of {key: error message} indicating which element of failed.
 */
export type BatchResult = {
  failed: {
    [key: string]: string;
  };
};

export type BatchValidation = {
  user_emails: string[];
  /**
   * @format uuid
   */
  product_variant_id: string;
  validated: boolean;
};

export type BodyAuthorizeValidationAuthAuthorizationFlowAuthorizeValidationPost =
  {
    client_id: string;
    redirect_uri?: string | null;
    response_type: string;
    scope?: string | null;
    state?: string | null;
    nonce?: string | null;
    code_challenge?: string | null;
    code_challenge_method?: string | null;
    email: string;
    password: string;
  };

export type BodyCreateAdvertImageAdvertAdvertsAdvertIdPicturePost = {
  /**
   * @format binary
   */
  image: Blob;
};

export type BodyCreateAssociationLogoPhonebookAssociationsAssociationIdPicturePost =
  {
    /**
     * @format binary
     */
    image: Blob;
  };

export type BodyCreateCampaignsLogoCampaignListsListIdLogoPost = {
  /**
   * @format binary
   */
  image: Blob;
};

export type BodyCreateCampaignsLogoCinemaSessionsSessionIdPosterPost = {
  /**
   * @format binary
   */
  image: Blob;
};

export type BodyCreateCurrentRaffleLogoTombolaRafflesRaffleIdLogoPost = {
  /**
   * @format binary
   */
  image: Blob;
};

export type BodyCreateCurrentUserProfilePictureUsersMeProfilePicturePost = {
  /**
   * @format binary
   */
  image: Blob;
};

export type BodyCreatePaperPdfAndCoverPhPaperIdPdfPost = {
  /**
   * @format binary
   */
  pdf: Blob;
};

export type BodyCreatePrizePictureTombolaPrizesPrizeIdPicturePost = {
  /**
   * @format binary
   */
  image: Blob;
};

export type BodyCreateRecommendationImageRecommendationRecommendationsRecommendationIdPicturePost =
  {
    /**
     * @format binary
     */
    image: Blob;
  };

export type BodyIntrospectAuthIntrospectPost = {
  token: string;
  token_type_hint?: string | null;
  client_id?: string | null;
  client_secret?: string | null;
};

export type BodyLoginForAccessTokenAuthSimpleTokenPost = {
  grant_type?: string | null;
  username: string;
  password: string;
  /**
   * @default
   */
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
};

export type BodyPostAuthorizePageAuthAuthorizePost = {
  response_type: string;
  client_id: string;
  redirect_uri: string;
  scope?: string | null;
  state?: string | null;
  nonce?: string | null;
  code_challenge?: string | null;
  code_challenge_method?: string | null;
};

export type BodyRecoverUserUsersRecoverPost = {
  email: string;
};

export type BodyRegisterFirebaseDeviceNotificationDevicesPost = {
  firebase_token: string;
};

export type BodyTokenAuthTokenPost = {
  refresh_token?: string | null;
  grant_type: string;
  code?: string | null;
  redirect_uri?: string | null;
  client_id?: string | null;
  client_secret?: string | null;
  code_verifier?: string | null;
};

export type BodyUploadDocumentRaidDocumentDocumentTypePost = {
  /**
   * @format binary
   */
  file: Blob;
};

export type BodyUploadParticipantCertificateCompetitionParticipantsSportsSportIdCertificatePost =
  {
    /**
     * @format binary
     */
    certificate: Blob;
  };

export type BookingBase = {
  reason: string;
  /**
   * @format date-time
   */
  start: string;
  /**
   * @format date-time
   */
  end: string;
  /**
   * @format date-time
   */
  creation: string;
  note?: string | null;
  room_id: string;
  key: boolean;
  recurrence_rule?: string | null;
  entity?: string | null;
};

export type BookingEdit = {
  reason?: string | null;
  start?: string | null;
  end?: string | null;
  note?: string | null;
  room_id?: string | null;
  key?: boolean | null;
  recurrence_rule?: string | null;
  entity?: string | null;
};

export type BookingReturn = {
  reason: string;
  /**
   * @format date-time
   */
  start: string;
  /**
   * @format date-time
   */
  end: string;
  /**
   * @format date-time
   */
  creation: string;
  note?: string | null;
  room_id: string;
  key: boolean;
  recurrence_rule?: string | null;
  entity?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
  room: RoomComplete;
};

export type BookingReturnApplicant = {
  reason: string;
  /**
   * @format date-time
   */
  start: string;
  /**
   * @format date-time
   */
  end: string;
  /**
   * @format date-time
   */
  creation: string;
  note?: string | null;
  room_id: string;
  key: boolean;
  recurrence_rule?: string | null;
  entity?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
  room: RoomComplete;
  applicant: Applicant;
};

export type BookingReturnSimpleApplicant = {
  reason: string;
  /**
   * @format date-time
   */
  start: string;
  /**
   * @format date-time
   */
  end: string;
  /**
   * @format date-time
   */
  creation: string;
  note?: string | null;
  room_id: string;
  key: boolean;
  recurrence_rule?: string | null;
  entity?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
  room: RoomComplete;
  applicant: CoreUserSimple;
};

export type CalendarEventType =
  | "Event AE"
  | "Event USE"
  | "Asso ind\u00E9"
  | "HH"
  | "Strass"
  | "Rewass"
  | "Autre";

export type CashComplete = {
  balance: number;
  user_id: string;
  user: CoreUserSimple;
};

export type CashEdit = {
  balance: number;
};

export type CdrStatus = "pending" | "online" | "onsite" | "closed";

export type CdrUser = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  account_type: AccountType;
  /**
   * @format uuid
   */
  school_id: string;
  curriculum?: CurriculumComplete | null;
  promo?: number | null;
  email: string;
  birthday?: string | null;
  phone?: string | null;
  floor?: FloorsType | null;
};

export type CdrUserPreview = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  account_type: AccountType;
  /**
   * @format uuid
   */
  school_id: string;
  curriculum?: CurriculumComplete | null;
  promo?: number | null;
};

export type CdrUserUpdate = {
  promo?: number | null;
  nickname?: string | null;
  email?: string | null;
  birthday?: string | null;
  phone?: string | null;
  floor?: FloorsType | null;
};

export type CdrYear = {
  /**
   * @default 2025
   */
  year?: number;
};

export type ChangePasswordRequest = {
  email: string;
  old_password: string;
  new_password: string;
};

export type CineSessionBase = {
  /**
   * @format date-time
   */
  start: string;
  duration: number;
  name: string;
  overview: string;
  genre?: string | null;
  tagline?: string | null;
};

export type CineSessionComplete = {
  /**
   * @format date-time
   */
  start: string;
  duration: number;
  name: string;
  overview: string;
  genre?: string | null;
  tagline?: string | null;
  id: string;
};

export type CineSessionUpdate = {
  name?: string | null;
  start?: string | null;
  duration?: number | null;
  overview?: string | null;
  genre?: string | null;
  tagline?: string | null;
};

export type CompetitionEdition = {
  name: string;
  year: number;
  /**
   * @format date-time
   */
  start_date: string;
  /**
   * @format date-time
   */
  end_date: string;
  /**
   * @default true
   */
  active?: boolean;
  /**
   * @default false
   */
  inscription_enabled?: boolean;
  /**
   * @format uuid
   */
  id: string;
};

export type CompetitionEditionBase = {
  name: string;
  year: number;
  /**
   * @format date-time
   */
  start_date: string;
  /**
   * @format date-time
   */
  end_date: string;
  /**
   * @default true
   */
  active?: boolean;
  /**
   * @default false
   */
  inscription_enabled?: boolean;
};

export type CompetitionEditionEdit = {
  name?: string | null;
  year?: number | null;
  start_date?: string | null;
  end_date?: string | null;
};

export type CompetitionGroupType = "sport_manager" | "schools_bds";

/**
 * A user with additional fields for competition purposes.
 * This is used to represent a user in the context of a competition.
 */
export type CompetitionUser = {
  sport_category: SportCategory;
  /**
   * @default false
   */
  is_pompom?: boolean;
  /**
   * @default false
   */
  is_fanfare?: boolean;
  /**
   * @default false
   */
  is_cameraman?: boolean;
  /**
   * @default false
   */
  is_athlete?: boolean;
  /**
   * @default false
   */
  is_volunteer?: boolean;
  user_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * @default false
   */
  validated?: boolean;
  user: CoreUser;
};

export type CompetitionUserBase = {
  sport_category: SportCategory;
  /**
   * @default false
   */
  is_pompom?: boolean;
  /**
   * @default false
   */
  is_fanfare?: boolean;
  /**
   * @default false
   */
  is_cameraman?: boolean;
  /**
   * @default false
   */
  is_athlete?: boolean;
  /**
   * @default false
   */
  is_volunteer?: boolean;
};

export type CompetitionUserEdit = {
  sport_category?: SportCategory | null;
  validated?: boolean | null;
  is_pompom?: boolean | null;
  is_fanfare?: boolean | null;
  is_cameraman?: boolean | null;
  is_athlete?: boolean | null;
  is_volunteer?: boolean | null;
};

export type CompetitionUserSimple = {
  sport_category: SportCategory;
  /**
   * @default false
   */
  is_pompom?: boolean;
  /**
   * @default false
   */
  is_fanfare?: boolean;
  /**
   * @default false
   */
  is_cameraman?: boolean;
  /**
   * @default false
   */
  is_athlete?: boolean;
  /**
   * @default false
   */
  is_volunteer?: boolean;
  user_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @format date-time
   */
  created_at: string;
  /**
   * @default false
   */
  validated?: boolean;
};

/**
 * Schema for batch membership deletion
 */
export type CoreBatchDeleteMembership = {
  group_id: string;
};

/**
 * Schema for batch membership creation
 */
export type CoreBatchMembership = {
  user_emails: string[];
  group_id: string;
  description?: string | null;
};

/**
 * The schema is used for batch account creation requests.
 */
export type CoreBatchUserCreateRequest = {
  email: string;
};

/**
 * Schema for group's model similar to core_group table in database
 */
export type CoreGroup = {
  name: string;
  description?: string | null;
  id: string;
  members?: CoreUserSimple[];
};

/**
 * Model for group creation schema
 */
export type CoreGroupCreate = {
  name: string;
  description?: string | null;
};

/**
 * Simplified schema for group's model, used when getting all groups
 */
export type CoreGroupSimple = {
  name: string;
  description?: string | null;
  id: string;
};

/**
 * Schema for group update
 */
export type CoreGroupUpdate = {
  name?: string | null;
  description?: string | null;
};

/**
 * Information about Hyperion
 */
export type CoreInformation = {
  ready: boolean;
  version: string;
  minimal_titan_version_code: number;
};

/**
 * Schema for membership creation (allows adding a user to a group)
 */
export type CoreMembership = {
  user_id: string;
  group_id: string;
  description?: string | null;
};

export type CoreMembershipDelete = {
  user_id: string;
  group_id: string;
};

export type CoreSchool = {
  name: string;
  email_regex: string;
  /**
   * @format uuid
   */
  id: string;
};

/**
 * Schema for school's model
 */
export type CoreSchoolBase = {
  name: string;
  email_regex: string;
};

/**
 * Schema for school update
 */
export type CoreSchoolUpdate = {
  name?: string | null;
  email_regex?: string | null;
};

/**
 * Schema for user's model similar to core_user table in database
 */
export type CoreUser = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  account_type: AccountType;
  /**
   * @format uuid
   */
  school_id: string;
  email: string;
  birthday?: string | null;
  promo?: number | null;
  floor?: FloorsType | null;
  phone?: string | null;
  created_on?: string | null;
  groups?: CoreGroupSimple[];
  school?: CoreSchool | null;
};

export type CoreUserActivateRequest = {
  name: string;
  firstname: string;
  nickname?: string | null;
  activation_token: string;
  password: string;
  birthday?: string | null;
  phone?: string | null;
  floor?: FloorsType | null;
  /**
   * Promotion of the student, an integer like 2021
   */
  promo?: number | null;
};

/**
 * The schema is used to send an account creation request.
 */
export type CoreUserCreateRequest = {
  email: string;
  /**
   * Allow Hyperion to create an external user. Without this, Hyperion will only allow non external students to be created. The email address will be used to determine if the user should be external or not. An external user may not have an ECL email address, he won't be able to access most features.
   *
   * @deprecated true
   */
  accept_external?: boolean | null;
};

/**
 * Schema for user fusion
 */
export type CoreUserFusionRequest = {
  user_kept_email: string;
  user_deleted_email: string;
};

/**
 * Simplified schema for user's model, used when getting all users
 */
export type CoreUserSimple = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  account_type: AccountType;
  /**
   * @format uuid
   */
  school_id: string;
};

/**
 * Schema for user update
 */
export type CoreUserUpdate = {
  nickname?: string | null;
  birthday?: string | null;
  phone?: string | null;
  floor?: FloorsType | null;
};

export type CoreUserUpdateAdmin = {
  email?: string | null;
  school_id?: string | null;
  account_type?: AccountType | null;
  name?: string | null;
  firstname?: string | null;
  promo?: number | null;
  nickname?: string | null;
  birthday?: string | null;
  phone?: string | null;
  floor?: FloorsType | null;
};

export type CurriculumBase = {
  name: string;
};

export type CurriculumComplete = {
  name: string;
  /**
   * @format uuid
   */
  id: string;
};

export type CustomDataBase = {
  value: string;
};

export type CustomDataComplete = {
  value: string;
  /**
   * @format uuid
   */
  field_id: string;
  /**
   * @format uuid
   */
  user_id: string;
  field: CustomDataFieldComplete;
};

export type CustomDataFieldBase = {
  name: string;
  can_user_answer: boolean;
};

export type CustomDataFieldComplete = {
  name: string;
  can_user_answer: boolean;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  product_id: string;
};

export type Decision = "approved" | "declined" | "pending";

/**
 * Base schema for AMAP deliveries
 */
export type DeliveryBase = {
  /**
   * @format date
   */
  delivery_date: string;
  products_ids?: string[];
};

export type DeliveryProductsUpdate = {
  products_ids: string[];
};

export type DeliveryReturn = {
  /**
   * @format date
   */
  delivery_date: string;
  products?: AppModulesAmapSchemasAmapProductComplete[];
  id: string;
  status: DeliveryStatusType;
};

export type DeliveryStatusType =
  | "creation"
  | "orderable"
  | "locked"
  | "delivered"
  | "archived";

export type DeliveryUpdate = {
  delivery_date?: string | null;
};

export type Difficulty = "discovery" | "sports" | "expert";

export type Document = {
  type: DocumentType;
  name: string;
  id: string;
  /**
   * @format date
   */
  uploaded_at: string;
  validation: DocumentValidation;
};

export type DocumentBase = {
  name: string;
};

export type DocumentComplete = {
  name: string;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  seller_id: string;
};

export type DocumentCreation = {
  id: string;
};

export type DocumentSignatureType = "material" | "numeric";

export type DocumentType =
  | "idCard"
  | "medicalCertificate"
  | "studentCard"
  | "raidRules"
  | "parentAuthorization";

export type DocumentValidation =
  | "pending"
  | "accepted"
  | "refused"
  | "temporary";

export type EmergencyContact = {
  firstname?: string | null;
  name?: string | null;
  phone?: string | null;
};

export type EventApplicant = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  account_type: AccountType;
  /**
   * @format uuid
   */
  school_id: string;
  email: string;
  promo?: number | null;
  phone?: string | null;
};

export type EventBase = {
  name: string;
  organizer: string;
  /**
   * @format date-time
   */
  start: string;
  /**
   * @format date-time
   */
  end: string;
  all_day: boolean;
  location: string;
  type: CalendarEventType;
  description: string;
  recurrence_rule?: string | null;
};

export type EventComplete = {
  name: string;
  organizer: string;
  /**
   * @format date-time
   */
  start: string;
  /**
   * @format date-time
   */
  end: string;
  all_day: boolean;
  location: string;
  type: CalendarEventType;
  description: string;
  recurrence_rule?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
};

export type EventEdit = {
  name?: string | null;
  organizer?: string | null;
  start?: string | null;
  end?: string | null;
  all_day?: boolean | null;
  location?: string | null;
  type?: CalendarEventType | null;
  description?: string | null;
  recurrence_rule?: string | null;
};

export type EventReturn = {
  name: string;
  organizer: string;
  /**
   * @format date-time
   */
  start: string;
  /**
   * @format date-time
   */
  end: string;
  all_day: boolean;
  location: string;
  type: CalendarEventType;
  description: string;
  recurrence_rule?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
  applicant: EventApplicant;
};

export type FirebaseDevice = {
  /**
   * The Hyperion user id
   */
  user_id: string;
  /**
   * @default Firebase device token
   */
  firebase_device_token?: string;
};

export type FlappyBirdScoreBase = {
  value: number;
};

/**
 * A score with its position in the best players leaderboard
 */
export type FlappyBirdScoreCompleteFeedBack = {
  value: number;
  user: CoreUserSimple;
  /**
   * @format date-time
   */
  creation_time: string;
  position: number;
};

export type FlappyBirdScoreInDB = {
  value: number;
  user: CoreUserSimple;
  /**
   * @format date-time
   */
  creation_time: string;
  /**
   * @format uuid
   */
  id: string;
  user_id: string;
};

export type FloorsType =
  | "Autre"
  | "Adoma"
  | "Exte"
  | "T1"
  | "T2"
  | "T3"
  | "T4"
  | "T56"
  | "U1"
  | "U2"
  | "U3"
  | "U4"
  | "U56"
  | "V1"
  | "V2"
  | "V3"
  | "V45"
  | "V6"
  | "X1"
  | "X2"
  | "X3"
  | "X4"
  | "X5"
  | "X6";

export type GenerateTicketBase = {
  name: string;
  max_use: number;
  /**
   * @format date-time
   */
  expiration: string;
};

export type GenerateTicketComplete = {
  name: string;
  max_use: number;
  /**
   * @format date-time
   */
  expiration: string;
  /**
   * @format uuid
   */
  id: string;
};

export type GroupNotificationRequest = {
  group_id: string;
  title: string;
  content: string;
};

export type HTTPValidationError = {
  detail?: ValidationError[];
};

export type History = {
  /**
   * @format uuid
   */
  id: string;
  type: HistoryType;
  other_wallet_name: string;
  total: number;
  /**
   * @format date-time
   */
  creation: string;
  status: TransactionStatus;
  refund?: HistoryRefund | null;
};

export type HistoryRefund = {
  total: number;
  /**
   * @format date-time
   */
  creation: string;
};

export type HistoryType =
  | "transfer"
  | "received"
  | "given"
  | "refund_credited"
  | "refund_debited";

export type Information = {
  manager: string;
  link: string;
  description: string;
};

export type InformationEdit = {
  manager?: string | null;
  link?: string | null;
  description?: string | null;
};

/**
 * Schema for Hyperion data
 */
export type IntegrityCheckData = {
  /**
   * @format date-time
   */
  date: string;
  wallets: WalletBase[];
  transactions: TransactionBase[];
  transfers: Transfer[];
  refunds: RefundBase[];
};

export type IntrospectTokenResponse = {
  active: boolean;
};

export type InviteToken = {
  team_id: string;
  token: string;
};

export type Item = {
  name: string;
  suggested_caution: number;
  total_quantity: number;
  /**
   * duration in seconds
   */
  suggested_lending_duration: number;
  id: string;
  loaner_id: string;
  loaned_quantity: number;
};

/**
 * Base schema for item's model
 */
export type ItemBase = {
  name: string;
  suggested_caution: number;
  total_quantity: number;
  /**
   * duration in seconds
   */
  suggested_lending_duration: number;
};

/**
 * A schema used to represent Item in a loan with its quantity in a request by the client
 */
export type ItemBorrowed = {
  item_id: string;
  quantity: number;
};

/**
 * A schema used to represent Item in a loan with its quantity in a response to the client
 */
export type ItemQuantity = {
  quantity: number;
  itemSimple: ItemSimple;
};

export type ItemSimple = {
  id: string;
  name: string;
  loaner_id: string;
};

export type ItemUpdate = {
  name?: string | null;
  suggested_caution?: number | null;
  total_quantity?: number | null;
  /**
   * duration in seconds
   */
  suggested_lending_duration?: number | null;
};

export type Kinds =
  | "Comit\u00E9"
  | "Section AE"
  | "Club AE"
  | "Section USE"
  | "Club USE"
  | "Asso ind\u00E9";

export type KindsReturn = {
  kinds: Kinds[];
};

/**
 * Base schema for a list.
 */
export type ListBase = {
  name: string;
  description: string;
  type: ListType;
  section_id: string;
  members: ListMemberBase[];
  program?: string | null;
};

export type ListEdit = {
  name?: string | null;
  description?: string | null;
  type?: ListType | null;
  members?: ListMemberBase[] | null;
  program?: string | null;
};

export type ListMemberBase = {
  user_id: string;
  role: string;
};

export type ListMemberComplete = {
  user_id: string;
  role: string;
  user: CoreUserSimple;
};

export type ListReturn = {
  id: string;
  name: string;
  description: string;
  type: ListType;
  section: SectionComplete;
  members: ListMemberComplete[];
  program?: string | null;
};

/**
 * A list can be "Serios" or "Pipo". There will also be one "Blank" list by section that will be automatically added when the vote is open.
 */
export type ListType = "Serio" | "Pipo" | "Blank";

/**
 * A complete representation of a Loan which can be sent by the API
 */
export type Loan = {
  borrower_id: string;
  loaner_id: string;
  /**
   * @format date
   */
  start: string;
  /**
   * @format date
   */
  end: string;
  notes?: string | null;
  caution?: string | null;
  id: string;
  returned: boolean;
  returned_date: string | null;
  items_qty: ItemQuantity[];
  borrower: CoreUserSimple;
  loaner: Loaner;
};

/**
 * A schema used to create a new loan
 */
export type LoanCreation = {
  borrower_id: string;
  loaner_id: string;
  /**
   * @format date
   */
  start: string;
  /**
   * @format date
   */
  end: string;
  notes?: string | null;
  caution?: string | null;
  items_borrowed: ItemBorrowed[];
};

export type LoanExtend = {
  /**
   * A new return date for the Loan
   */
  end?: string | null;
  /**
   * The duration by which the loan should be extended in seconds
   */
  duration?: number | null;
};

/**
 * When the client asks to update the Loan with a PATCH request, they should be able to change the loan items.
 */
export type LoanUpdate = {
  borrower_id?: string | null;
  start?: string | null;
  end?: string | null;
  notes?: string | null;
  caution?: string | null;
  returned?: boolean | null;
  items_borrowed?: ItemBorrowed[] | null;
};

export type Loaner = {
  name: string;
  /**
   * The group manager id should by a group identifier
   */
  group_manager_id: string;
  id: string;
};

export type LoanerBase = {
  name: string;
  /**
   * The group manager id should by a group identifier
   */
  group_manager_id: string;
};

export type LoanerUpdate = {
  name?: string | null;
  group_manager_id?: string | null;
};

export type Location = {
  name: string;
  description?: string | null;
  address?: string | null;
  latitude?: number | null;
  longitude?: number | null;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  edition_id: string;
};

export type LocationBase = {
  name: string;
  description?: string | null;
  address?: string | null;
  latitude?: number | null;
  longitude?: number | null;
};

export type LocationComplete = {
  name: string;
  description?: string | null;
  address?: string | null;
  latitude?: number | null;
  longitude?: number | null;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  edition_id: string;
  matches?: MatchComplete[];
};

export type LocationEdit = {
  name?: string | null;
  description?: string | null;
  address?: string | null;
  latitude?: number | null;
  longitude?: number | null;
};

export type MailMigrationRequest = {
  new_email: string;
};

export type Manager = {
  name: string;
  group_id: string;
  id: string;
};

export type ManagerBase = {
  name: string;
  group_id: string;
};

export type ManagerUpdate = {
  name?: string | null;
  group_id?: string | null;
};

export type Match = {
  name: string;
  /**
   * @format uuid
   */
  team1_id: string;
  /**
   * @format uuid
   */
  team2_id: string;
  /**
   * @format uuid
   */
  location_id: string;
  /**
   * @format date-time
   */
  date: string;
  score_team1?: number | null;
  score_team2?: number | null;
  winner_id?: string | null;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
};

export type MatchBase = {
  name: string;
  /**
   * @format uuid
   */
  team1_id: string;
  /**
   * @format uuid
   */
  team2_id: string;
  /**
   * @format uuid
   */
  location_id: string;
  /**
   * @format date-time
   */
  date: string;
  score_team1?: number | null;
  score_team2?: number | null;
  winner_id?: string | null;
};

export type MatchComplete = {
  name: string;
  /**
   * @format uuid
   */
  team1_id: string;
  /**
   * @format uuid
   */
  team2_id: string;
  /**
   * @format uuid
   */
  location_id: string;
  /**
   * @format date-time
   */
  date: string;
  score_team1?: number | null;
  score_team2?: number | null;
  winner_id?: string | null;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
  team1: Team;
  team2: Team;
  location: Location;
};

export type MatchEdit = {
  name?: string | null;
  sport_id?: string | null;
  team1_id?: string | null;
  team2_id?: string | null;
  date?: string | null;
  location_id?: string | null;
  score_team1?: number | null;
  score_team2?: number | null;
  winner_id?: string | null;
};

export type MeetingPlace = "centrale" | "bellecour" | "anyway";

export type MemberComplete = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  account_type: AccountType;
  /**
   * @format uuid
   */
  school_id: string;
  email: string;
  phone?: string | null;
  promo?: number | null;
  memberships: MembershipComplete[];
};

export type MembershipComplete = {
  user_id: string;
  association_id: string;
  mandate_year: number;
  role_name: string;
  role_tags?: string | null;
  member_order: number;
  id: string;
};

export type MembershipEdit = {
  role_name?: string | null;
  role_tags?: string | null;
  member_order?: number | null;
};

export type MembershipSimple = {
  name: string;
  manager_group_id: string;
  /**
   * @format uuid
   */
  id: string;
};

export type MembershipUserMappingEmail = {
  user_email: string;
  /**
   * @format date
   */
  start_date: string;
  /**
   * @format date
   */
  end_date: string;
};

export type ModuleVisibility = {
  root: string;
  allowed_group_ids: string[];
  allowed_account_types: AccountType[];
};

export type ModuleVisibilityCreate = {
  root: string;
  allowed_group_id?: string | null;
  allowed_account_type?: AccountType | null;
};

export type OrderBase = {
  user_id: string;
  delivery_id: string;
  products_ids: string[];
  collection_slot: AmapSlotType;
  products_quantity: number[];
};

export type OrderEdit = {
  products_ids?: string[] | null;
  collection_slot?: AmapSlotType | null;
  products_quantity?: number[] | null;
};

export type OrderReturn = {
  user: CoreUserSimple;
  delivery_id: string;
  productsdetail: ProductQuantity[];
  collection_slot: AmapSlotType;
  order_id: string;
  amount: number;
  /**
   * @format date-time
   */
  ordering_date: string;
  /**
   * @format date
   */
  delivery_date: string;
};

export type PackTicketBase = {
  price: number;
  pack_size: number;
  raffle_id: string;
};

export type PackTicketEdit = {
  raffle_id?: string | null;
  price?: number | null;
  pack_size?: number | null;
};

export type PackTicketSimple = {
  price: number;
  pack_size: number;
  raffle_id: string;
  id: string;
};

/**
 * Base schema for paper's model
 */
export type PaperBase = {
  name: string;
  /**
   * @format date
   */
  release_date: string;
};

export type PaperComplete = {
  name: string;
  /**
   * @format date
   */
  release_date: string;
  /**
   * @format uuid
   */
  id: string;
};

export type PaperUpdate = {
  name?: string | null;
  release_date?: string | null;
};

export type Participant = {
  user_id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @format uuid
   */
  school_id: string;
  license?: string | null;
  certificate_file_id?: string | null;
  is_license_valid: boolean;
  /**
   * @default false
   */
  substitute?: boolean;
  /**
   * @format uuid
   */
  team_id: string;
};

export type ParticipantComplete = {
  user_id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @format uuid
   */
  school_id: string;
  license?: string | null;
  certificate_file_id?: string | null;
  is_license_valid: boolean;
  /**
   * @default false
   */
  substitute?: boolean;
  /**
   * @format uuid
   */
  team_id: string;
  user: CompetitionUser;
  team: Team;
};

export type ParticipantInfo = {
  license?: string | null;
  /**
   * @default false
   */
  substitute?: boolean;
  team_id?: string | null;
};

export type PaymentType = "cash" | "check" | "HelloAsso" | "card" | "archived";

export type PaymentUrl = {
  url: string;
};

export type PlantComplete = {
  /**
   * @format uuid
   */
  id: string;
  reference: string;
  state: PlantState;
  /**
   * @format uuid
   */
  species_id: string;
  propagation_method: PropagationMethod;
  /**
   * @default 1
   */
  nb_seeds_envelope?: number;
  planting_date?: string | null;
  borrower_id?: string | null;
  nickname?: string | null;
  previous_note?: string | null;
  current_note?: string | null;
  borrowing_date?: string | null;
  ancestor_id?: string | null;
  /**
   * @default false
   */
  confidential?: boolean;
};

export type PlantCreation = {
  /**
   * @format uuid
   */
  species_id: string;
  propagation_method: PropagationMethod;
  /**
   * @default 1
   */
  nb_seeds_envelope?: number;
  ancestor_id?: string | null;
  previous_note?: string | null;
  /**
   * @default false
   */
  confidential?: boolean;
};

export type PlantEdit = {
  state?: PlantState | null;
  current_note?: string | null;
  /**
   * @default false
   */
  confidential?: boolean;
  planting_date?: string | null;
  borrowing_date?: string | null;
  nickname?: string | null;
};

export type PlantSimple = {
  /**
   * @format uuid
   */
  id: string;
  reference: string;
  state: PlantState;
  /**
   * @format uuid
   */
  species_id: string;
  propagation_method: PropagationMethod;
  /**
   * @default 1
   */
  nb_seeds_envelope?: number;
  planting_date?: string | null;
  borrower_id?: string | null;
  nickname?: string | null;
};

export type PlantState =
  | "en attente"
  | "r\u00E9cup\u00E9r\u00E9e"
  | "consomm\u00E9e";

export type PrizeBase = {
  name: string;
  description: string;
  raffle_id: string;
  quantity: number;
};

export type PrizeEdit = {
  raffle_id?: string | null;
  description?: string | null;
  name?: string | null;
  quantity?: number | null;
};

export type PrizeSimple = {
  name: string;
  description: string;
  raffle_id: string;
  quantity: number;
  id: string;
};

export type Product = {
  name: string;
  /**
   * @default false
   */
  required?: boolean;
  description?: string | null;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  edition_id: string;
};

export type ProductCompleteNoConstraint = {
  name_fr: string;
  name_en?: string | null;
  description_fr?: string | null;
  description_en?: string | null;
  available_online: boolean;
  needs_validation: boolean;
  year: number;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  seller_id: string;
  variants?: AppModulesCdrSchemasCdrProductVariantComplete[];
  related_membership?: MembershipSimple | null;
  tickets: GenerateTicketComplete[];
};

export type ProductPublicType =
  | "pompom"
  | "fanfare"
  | "cameraman"
  | "athlete"
  | "volunteer";

export type ProductQuantity = {
  quantity: number;
  product: AppModulesAmapSchemasAmapProductComplete;
};

export type ProductSchoolType = "centrale" | "from_lyon" | "others";

export type ProductSimple = {
  name: string;
  price: number;
  category: string;
};

export type ProductVariant = {
  /**
   * @format uuid
   */
  product_id: string;
  name: string;
  description?: string | null;
  price: number;
  /**
   * @default true
   */
  enabled?: boolean;
  unique: boolean;
  school_type: ProductSchoolType;
  public_type?: ProductPublicType | null;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @format uuid
   */
  id: string;
};

export type PropagationMethod = "bouture" | "graine";

export type Purchase = {
  /**
   * @format uuid
   */
  product_variant_id: string;
  quantity: number;
  user_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
  validated: boolean;
  /**
   * @format date-time
   */
  purchased_on: string;
};

export type PurchaseComplete = {
  quantity: number;
  user_id: string;
  /**
   * @format uuid
   */
  product_variant_id: string;
  validated: boolean;
  /**
   * @format date-time
   */
  purchased_on: string;
};

export type PurchaseReturn = {
  quantity: number;
  user_id: string;
  /**
   * @format uuid
   */
  product_variant_id: string;
  validated: boolean;
  /**
   * @format date-time
   */
  purchased_on: string;
  price: number;
  product: AppModulesCdrSchemasCdrProductComplete;
  seller: SellerComplete;
};

/**
 * Base schema for raffles
 */
export type RaffleBase = {
  name: string;
  status?: RaffleStatusType | null;
  description?: string | null;
  group_id: string;
};

export type RaffleComplete = {
  name: string;
  status?: RaffleStatusType | null;
  description?: string | null;
  group_id: string;
  id: string;
};

export type RaffleEdit = {
  name?: string | null;
  description?: string | null;
};

export type RaffleStats = {
  tickets_sold: number;
  amount_raised: number;
};

export type RaffleStatusType = "creation" | "open" | "lock";

export type RaidDriveFoldersCreation = {
  parent_folder_id: string;
};

export type RaidInformation = {
  raid_start_date?: string | null;
  raid_end_date?: string | null;
  raid_registering_end_date?: string | null;
  payment_link?: string | null;
  contact?: string | null;
  president?: EmergencyContact | null;
  volunteer_responsible?: EmergencyContact | null;
  security_responsible?: EmergencyContact | null;
  rescue?: EmergencyContact | null;
  raid_rules_id?: string | null;
  raid_information_id?: string | null;
};

export type RaidParticipant = {
  name: string;
  firstname: string;
  /**
   * @format date
   */
  birthday: string;
  phone: string;
  email: string;
  id: string;
  bike_size: Size | null;
  t_shirt_size: Size | null;
  situation: string | null;
  validation_progress: number;
  payment: boolean;
  t_shirt_payment: boolean;
  number_of_document: number;
  number_of_validated_document: number;
  address: string | null;
  other_school?: string | null;
  company?: string | null;
  diet?: string | null;
  id_card: Document | null;
  medical_certificate: Document | null;
  security_file: SecurityFile | null;
  student_card?: Document | null;
  raid_rules?: Document | null;
  parent_authorization?: Document | null;
  attestation_on_honour: boolean;
  is_minor: boolean;
};

export type RaidParticipantBase = {
  name: string;
  firstname: string;
  /**
   * @format date
   */
  birthday: string;
  phone: string;
  email: string;
};

export type RaidParticipantPreview = {
  name: string;
  firstname: string;
  /**
   * @format date
   */
  birthday: string;
  phone: string;
  email: string;
  id: string;
  bike_size: Size | null;
  t_shirt_size: Size | null;
  situation: string | null;
  validation_progress: number;
  payment: boolean;
  t_shirt_payment: boolean;
  number_of_document: number;
  number_of_validated_document: number;
};

export type RaidParticipantUpdate = {
  name?: string | null;
  firstname?: string | null;
  birthday?: string | null;
  address?: string | null;
  phone?: string | null;
  email?: string | null;
  bike_size?: Size | null;
  t_shirt_size?: Size | null;
  situation?: string | null;
  other_school?: string | null;
  company?: string | null;
  diet?: string | null;
  attestation_on_honour?: boolean | null;
  id_card_id?: string | null;
  medical_certificate_id?: string | null;
  security_file_id?: string | null;
  student_card_id?: string | null;
  raid_rules_id?: string | null;
  parent_authorization_id?: string | null;
};

export type RaidPrice = {
  student_price?: number | null;
  partner_price?: number | null;
  external_price?: number | null;
  t_shirt_price?: number | null;
};

export type RaidTeam = {
  name: string;
  id: string;
  number: number | null;
  captain: RaidParticipant;
  second: RaidParticipant | null;
  difficulty: Difficulty | null;
  meeting_place: MeetingPlace | null;
  validation_progress: number;
  file_id: string | null;
};

export type RaidTeamBase = {
  name: string;
};

export type RaidTeamPreview = {
  name: string;
  id: string;
  number: number | null;
  captain: RaidParticipantPreview;
  second: RaidParticipantPreview | null;
  difficulty: Difficulty | null;
  meeting_place: MeetingPlace | null;
  validation_progress: number;
};

export type RaidTeamUpdate = {
  name?: string | null;
  number?: number | null;
  difficulty?: Difficulty | null;
  meeting_place?: MeetingPlace | null;
};

export type Recommendation = {
  title: string;
  code?: string | null;
  summary: string;
  description: string;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format date-time
   */
  creation: string;
};

export type RecommendationBase = {
  title: string;
  code?: string | null;
  summary: string;
  description: string;
};

export type RecommendationEdit = {
  title?: string | null;
  code?: string | null;
  summary?: string | null;
  description?: string | null;
};

export type RefundBase = {
  /**
   * @format uuid
   */
  id: string;
  total: number;
  /**
   * @format date-time
   */
  creation: string;
  /**
   * @format uuid
   */
  transaction_id: string;
  seller_user_id?: string | null;
  /**
   * @format uuid
   */
  credited_wallet_id: string;
  /**
   * @format uuid
   */
  debited_wallet_id: string;
};

export type RefundInfo = {
  complete_refund: boolean;
  amount?: number | null;
};

export type ResetPasswordRequest = {
  reset_token: string;
  new_password: string;
};

export type RoleTagsReturn = {
  tags: string[];
};

export type RoomBase = {
  name: string;
  manager_id: string;
};

export type RoomComplete = {
  name: string;
  manager_id: string;
  id: string;
};

export type ScanInfo = {
  /**
   * @format uuid
   */
  id: string;
  tot: number;
  /**
   * @format date-time
   */
  iat: string;
  /**
   * @format uuid
   */
  key: string;
  store: boolean;
  signature: string;
  /**
   * @default false
   */
  bypass_membership?: boolean;
};

export type SchoolExtension = {
  /**
   * @format uuid
   */
  school_id: string;
  from_lyon: boolean;
  ffsu_id?: string | null;
  /**
   * @default true
   */
  active?: boolean;
  /**
   * @default false
   */
  inscription_enabled?: boolean;
  school: CoreSchool;
};

export type SchoolExtensionBase = {
  /**
   * @format uuid
   */
  school_id: string;
  from_lyon: boolean;
  ffsu_id?: string | null;
  /**
   * @default true
   */
  active?: boolean;
  /**
   * @default false
   */
  inscription_enabled?: boolean;
};

export type SchoolExtensionEdit = {
  from_lyon?: boolean | null;
  ffsu_id?: string | null;
  active?: boolean | null;
  inscription_enabled?: boolean | null;
};

export type SchoolGeneralQuota = {
  athlete_quota?: number | null;
  cameraman_quota?: number | null;
  pompom_quota?: number | null;
  fanfare_quota?: number | null;
  athlete_cameraman_quota?: number | null;
  athlete_pompom_quota?: number | null;
  athlete_fanfare_quota?: number | null;
  non_athlete_cameraman_quota?: number | null;
  non_athlete_pompom_quota?: number | null;
  non_athlete_fanfare_quota?: number | null;
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
};

export type SchoolGeneralQuotaBase = {
  athlete_quota?: number | null;
  cameraman_quota?: number | null;
  pompom_quota?: number | null;
  fanfare_quota?: number | null;
  athlete_cameraman_quota?: number | null;
  athlete_pompom_quota?: number | null;
  athlete_fanfare_quota?: number | null;
  non_athlete_cameraman_quota?: number | null;
  non_athlete_pompom_quota?: number | null;
  non_athlete_fanfare_quota?: number | null;
};

export type SchoolProductQuota = {
  /**
   * @format uuid
   */
  product_id: string;
  /**
   * @minimum 0
   */
  quota: number;
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
};

export type SchoolProductQuotaBase = {
  /**
   * @format uuid
   */
  product_id: string;
  /**
   * @minimum 0
   */
  quota: number;
};

export type SchoolProductQuotaEdit = {
  /**
   * @minimum 0
   */
  quota: number;
};

export type SchoolResult = {
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @minimum 0
   */
  total_points: number;
};

export type SchoolSportQuota = {
  participant_quota?: number | null;
  team_quota?: number | null;
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
};

export type SchoolSportQuotaEdit = {
  participant_quota?: number | null;
  team_quota?: number | null;
};

/**
 * Base schema for a section.
 */
export type SectionBase = {
  name: string;
  description: string;
};

export type SectionComplete = {
  name: string;
  description: string;
  id: string;
};

export type SecurityFile = {
  allergy?: string | null;
  asthma: boolean;
  intensive_care_unit?: boolean | null;
  intensive_care_unit_when?: string | null;
  ongoing_treatment?: string | null;
  sicknesses?: string | null;
  hospitalization?: string | null;
  surgical_operation?: string | null;
  trauma?: string | null;
  family?: string | null;
  emergency_person_firstname?: string | null;
  emergency_person_name?: string | null;
  emergency_person_phone?: string | null;
  file_id?: string | null;
  validation: DocumentValidation;
  id: string;
};

export type SecurityFileBase = {
  allergy?: string | null;
  asthma: boolean;
  intensive_care_unit?: boolean | null;
  intensive_care_unit_when?: string | null;
  ongoing_treatment?: string | null;
  sicknesses?: string | null;
  hospitalization?: string | null;
  surgical_operation?: string | null;
  trauma?: string | null;
  family?: string | null;
  emergency_person_firstname?: string | null;
  emergency_person_name?: string | null;
  emergency_person_phone?: string | null;
  file_id?: string | null;
};

export type SeedLibraryInformation = {
  /**
   * @default
   */
  facebook_url?: string;
  /**
   * @default
   */
  forum_url?: string;
  /**
   * @default
   */
  description?: string;
  /**
   * @default
   */
  contact?: string;
};

export type Seller = {
  user_id: string;
  /**
   * @format uuid
   */
  store_id: string;
  can_bank: boolean;
  can_see_history: boolean;
  can_cancel: boolean;
  can_manage_sellers: boolean;
  user: CoreUserSimple;
};

export type SellerBase = {
  name: string;
  group_id: string;
  order: number;
};

export type SellerComplete = {
  name: string;
  group_id: string;
  order: number;
  /**
   * @format uuid
   */
  id: string;
};

export type SellerCreation = {
  user_id: string;
  can_bank: boolean;
  can_see_history: boolean;
  can_cancel: boolean;
  can_manage_sellers: boolean;
};

export type SellerEdit = {
  name?: string | null;
  group_id?: string | null;
  order?: number | null;
};

export type SellerUpdate = {
  can_bank?: boolean | null;
  can_see_history?: boolean | null;
  can_cancel?: boolean | null;
  can_manage_sellers?: boolean | null;
};

export type SignatureBase = {
  signature_type: DocumentSignatureType;
  numeric_signature_id?: string | null;
};

export type SignatureComplete = {
  signature_type: DocumentSignatureType;
  numeric_signature_id?: string | null;
  user_id: string;
  /**
   * @format uuid
   */
  document_id: string;
};

export type Size = "XS" | "S" | "M" | "L" | "XL" | "None";

export type SpeciesBase = {
  prefix: string;
  name: string;
  difficulty: number;
  species_type: SpeciesType;
  card?: string | null;
  nb_seeds_recommended?: number | null;
  start_season?: string | null;
  end_season?: string | null;
  time_maturation?: number | null;
};

export type SpeciesComplete = {
  prefix: string;
  name: string;
  difficulty: number;
  species_type: SpeciesType;
  card?: string | null;
  nb_seeds_recommended?: number | null;
  start_season?: string | null;
  end_season?: string | null;
  time_maturation?: number | null;
  /**
   * @format uuid
   */
  id: string;
};

export type SpeciesEdit = {
  name?: string | null;
  prefix?: string | null;
  difficulty?: number | null;
  card?: string | null;
  species_type?: SpeciesType | null;
  nb_seeds_recommended?: number | null;
  start_season?: string | null;
  end_season?: string | null;
  time_maturation?: number | null;
};

export type SpeciesType =
  | "Plantes aromatiques"
  | "Plantes potag\u00E8res"
  | "Plante d int\u00E9rieur"
  | "Plantes fruiti\u00E8res"
  | "Cactus et succulentes"
  | "Plantes ornementales"
  | "Plantes grasses"
  | "Autre";

export type SpeciesTypesReturn = {
  species_type: SpeciesType[];
};

export type Sport = {
  name: string;
  /**
   * @exclusiveMinimum 0
   */
  team_size: number;
  substitute_max?: number | null;
  sport_category?: SportCategory | null;
  /**
   * @default true
   */
  active?: boolean;
  /**
   * @format uuid
   */
  id: string;
};

export type SportBase = {
  name: string;
  /**
   * @exclusiveMinimum 0
   */
  team_size: number;
  substitute_max?: number | null;
  sport_category?: SportCategory | null;
  /**
   * @default true
   */
  active?: boolean;
};

export type SportCategory = "masculine" | "feminine";

export type SportEdit = {
  name?: string | null;
  team_size?: number | null;
  substitute_max?: number | null;
  sport_category?: SportCategory | null;
  active?: boolean | null;
};

export type SportPodiumRankings = {
  rankings: TeamSportResultBase[];
};

export type SportQuotaInfo = {
  participant_quota?: number | null;
  team_quota?: number | null;
};

export type Status = {
  /**
   * @default pending
   */
  status?: CdrStatus;
};

/**
 * Status of the voting
 */
export type StatusType =
  | "waiting"
  | "open"
  | "closed"
  | "counting"
  | "published";

export type Store = {
  name: string;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  structure_id: string;
  /**
   * @format uuid
   */
  wallet_id: string;
  structure: Structure;
};

export type StoreBase = {
  name: string;
};

export type StoreUpdate = {
  name?: string | null;
};

export type Structure = {
  name: string;
  association_membership_id?: string | null;
  manager_user_id: string;
  /**
   * @format uuid
   */
  id: string;
  manager_user: CoreUserSimple;
  association_membership: MembershipSimple | null;
};

export type StructureBase = {
  name: string;
  association_membership_id?: string | null;
  manager_user_id: string;
};

export type StructureTranfert = {
  new_manager_user_id: string;
};

export type StructureUpdate = {
  name?: string | null;
  association_membership_id?: string | null;
};

export type TOSSignature = {
  accepted_tos_version: number;
};

export type TOSSignatureResponse = {
  accepted_tos_version: number;
  latest_tos_version: number;
  tos_content: string;
  /**
   * @default 0
   * @deprecated true
   */
  max_transaction_total?: number;
  max_wallet_balance: number;
};

export type Team = {
  name: string;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  captain_id: string;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format date-time
   */
  created_at: string;
};

export type TeamComplete = {
  name: string;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  captain_id: string;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format date-time
   */
  created_at: string;
  participants: ParticipantComplete[];
};

export type TeamEdit = {
  name?: string | null;
  captain_id?: string | null;
};

export type TeamInfo = {
  name: string;
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  captain_id: string;
};

export type TeamSportResult = {
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  /**
   * @format uuid
   */
  team_id: string;
  /**
   * @minimum 0
   */
  points: number;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @exclusiveMinimum 0
   */
  rank: number;
};

export type TeamSportResultBase = {
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  /**
   * @format uuid
   */
  team_id: string;
  /**
   * @minimum 0
   */
  points: number;
};

export type TeamSportResultComplete = {
  /**
   * @format uuid
   */
  school_id: string;
  /**
   * @format uuid
   */
  sport_id: string;
  /**
   * @format uuid
   */
  team_id: string;
  /**
   * @minimum 0
   */
  points: number;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @exclusiveMinimum 0
   */
  rank: number;
  team: Team;
};

export type TheMovieDB = {
  genres: {
    [key: string]: number | string;
  }[];
  overview: string;
  poster_path: string;
  title: string;
  runtime: number;
  tagline: string;
};

export type Ticket = {
  /**
   * @format uuid
   */
  id: string;
  product_variant: AppModulesCdrSchemasCdrProductVariantComplete;
  user: UserTicket;
  scan_left: number;
  tags: string;
  /**
   * @format date-time
   */
  expiration: string;
  name: string;
};

export type TicketComplete = {
  pack_id: string;
  user_id: string;
  winning_prize?: string | null;
  id: string;
  prize?: PrizeSimple | null;
  pack_ticket: PackTicketSimple;
  user: CoreUserSimple;
};

export type TicketScan = {
  /**
   * @pattern [^,]+
   */
  tag: string;
};

export type TicketSecret = {
  /**
   * @format uuid
   */
  qr_code_secret: string;
};

export type TicketSimple = {
  pack_id: string;
  user_id: string;
  winning_prize?: string | null;
  id: string;
};

export type TokenResponse = {
  access_token: string;
  /**
   * @default bearer
   */
  token_type?: "bearer";
  /**
   * @default 1800
   */
  expires_in?: number;
  /**
   * @default
   */
  scope?: string;
  refresh_token: string;
  id_token?: string | null;
};

export type TopicUser = {
  /**
   * @format uuid
   */
  id: string;
  name: string;
  module_root: string;
  topic_identifier: string | null;
  is_user_subscribed: boolean;
};

export type TransactionBase = {
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  debited_wallet_id: string;
  /**
   * @format uuid
   */
  credited_wallet_id: string;
  transaction_type: TransactionType;
  seller_user_id: string | null;
  total: number;
  /**
   * @format date-time
   */
  creation: string;
  status: TransactionStatus;
  qr_code_id?: string | null;
};

/**
 * CONFIRMED: The transaction has been confirmed and is complete.
 * CANCELED: The transaction has been canceled. It is used for transfer requests, for which the user has 15 minutes to complete the HelloAsso checkout
 * REFUNDED: The transaction between to wallets has been partially or totally refunded.
 * PENDING: The transaction is pending and has not yet been completed. It is used for transfer requests, for which the user has 15 minutes to complete the HelloAsso checkout
 */
export type TransactionStatus =
  | "confirmed"
  | "canceled"
  | "refunded"
  | "pending";

export type TransactionType = "direct" | "request" | "refund";

export type Transfer = {
  /**
   * @format uuid
   */
  id: string;
  type: TransferType;
  transfer_identifier: string;
  approver_user_id: string | null;
  /**
   * @format uuid
   */
  wallet_id: string;
  total: number;
  /**
   * @format date-time
   */
  creation: string;
  confirmed: boolean;
};

export type TransferInfo = {
  amount: number;
  redirect_url: string;
};

export type TransferType = "hello_asso";

export type UserGroupMembership = {
  user_id: string;
  group: CompetitionGroupType;
  /**
   * @format uuid
   */
  edition_id: string;
};

export type UserGroupMembershipComplete = {
  user_id: string;
  group: CompetitionGroupType;
  /**
   * @format uuid
   */
  edition_id: string;
  user: CoreUser;
};

export type UserMembershipBase = {
  /**
   * @format uuid
   */
  association_membership_id: string;
  /**
   * @format date
   */
  start_date: string;
  /**
   * @format date
   */
  end_date: string;
};

export type UserMembershipComplete = {
  /**
   * @format uuid
   */
  association_membership_id: string;
  /**
   * @format date
   */
  start_date: string;
  /**
   * @format date
   */
  end_date: string;
  /**
   * @format uuid
   */
  id: string;
  user_id: string;
  user: CoreUserSimple;
};

export type UserMembershipEdit = {
  start_date?: string | null;
  end_date?: string | null;
};

export type UserStore = {
  name: string;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  structure_id: string;
  /**
   * @format uuid
   */
  wallet_id: string;
  structure: Structure;
  can_bank: boolean;
  can_see_history: boolean;
  can_cancel: boolean;
  can_manage_sellers: boolean;
};

export type UserTicket = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  account_type: AccountType;
  /**
   * @format uuid
   */
  school_id: string;
  promo?: number | null;
  floor?: FloorsType | null;
  created_on?: string | null;
};

export type ValidationError = {
  loc: (string | number)[];
  msg: string;
  type: string;
};

export type VolunteerRegistrationComplete = {
  user_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
  /**
   * @format uuid
   */
  shift_id: string;
  /**
   * @format date-time
   */
  registered_at: string;
  validated: boolean;
  shift: VolunteerShift;
};

export type VolunteerShift = {
  name: string;
  description?: string | null;
  /**
   * @exclusiveMinimum 0
   */
  value: number;
  /**
   * @format date-time
   */
  start_time: string;
  /**
   * @format date-time
   */
  end_time: string;
  location?: string | null;
  /**
   * @exclusiveMinimum 0
   */
  max_volunteers: number;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  edition_id: string;
};

export type VolunteerShiftBase = {
  name: string;
  description?: string | null;
  /**
   * @exclusiveMinimum 0
   */
  value: number;
  /**
   * @format date-time
   */
  start_time: string;
  /**
   * @format date-time
   */
  end_time: string;
  location?: string | null;
  /**
   * @exclusiveMinimum 0
   */
  max_volunteers: number;
};

export type VolunteerShiftEdit = {
  name?: string | null;
  description?: string | null;
  value?: number | null;
  start_time?: string | null;
  end_time?: string | null;
  location?: string | null;
  max_volunteers?: number | null;
};

/**
 * Base schema for a vote.
 */
export type VoteBase = {
  list_id: string;
};

export type VoteStats = {
  section_id: string;
  count: number;
};

export type VoteStatus = {
  status: StatusType;
};

/**
 * Base schema for voters (groups allowed to vote).
 */
export type VoterGroup = {
  group_id: string;
};

export type Wallet = {
  /**
   * @format uuid
   */
  id: string;
  type: WalletType;
  balance: number;
  store: Store | null;
  user: CoreUser | null;
};

export type WalletBase = {
  /**
   * @format uuid
   */
  id: string;
  type: WalletType;
  balance: number;
};

export type WalletDevice = {
  name: string;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  wallet_id: string;
  /**
   * @format date-time
   */
  creation: string;
  status: WalletDeviceStatus;
};

export type WalletDeviceCreation = {
  name: string;
  /**
   * @format binary
   */
  ed25519_public_key: Blob;
};

export type WalletDeviceStatus = "inactive" | "active" | "revoked";

export type WalletType = "user" | "store";

export type AppCoreMembershipsSchemasMembershipsMembershipBase = {
  name: string;
  manager_group_id: string;
};

export type AppModulesAmapSchemasAmapProductComplete = {
  name: string;
  price: number;
  category: string;
  id: string;
};

export type AppModulesAmapSchemasAmapProductEdit = {
  category?: string | null;
  name?: string | null;
  price?: number | null;
};

export type AppModulesCampaignSchemasCampaignResult = {
  list_id: string;
  count: number;
};

export type AppModulesCdrSchemasCdrPaymentBase = {
  total: number;
  payment_type: PaymentType;
};

export type AppModulesCdrSchemasCdrPaymentComplete = {
  total: number;
  payment_type: PaymentType;
  /**
   * @format uuid
   */
  id: string;
  user_id: string;
  year: number;
};

export type AppModulesCdrSchemasCdrProductBase = {
  name_fr: string;
  name_en?: string | null;
  description_fr?: string | null;
  description_en?: string | null;
  available_online: boolean;
  /**
   * @default true
   */
  needs_validation?: boolean;
  related_membership?: MembershipSimple | null;
  tickets?: GenerateTicketBase[];
  product_constraints: string[];
  document_constraints: string[];
};

export type AppModulesCdrSchemasCdrProductComplete = {
  name_fr: string;
  name_en?: string | null;
  description_fr?: string | null;
  description_en?: string | null;
  available_online: boolean;
  needs_validation: boolean;
  /**
   * @format uuid
   */
  id: string;
  year: number;
  /**
   * @format uuid
   */
  seller_id: string;
  variants?: AppModulesCdrSchemasCdrProductVariantComplete[];
  related_membership?: MembershipSimple | null;
  product_constraints?: ProductCompleteNoConstraint[];
  document_constraints?: DocumentComplete[];
  tickets?: GenerateTicketComplete[];
};

export type AppModulesCdrSchemasCdrProductEdit = {
  name_fr?: string | null;
  name_en?: string | null;
  description_fr?: string | null;
  description_en?: string | null;
  description?: string | null;
  available_online?: boolean | null;
  related_membership?: MembershipSimple | null;
  product_constraints?: string[] | null;
  document_constraints?: string[] | null;
};

export type AppModulesCdrSchemasCdrProductVariantBase = {
  name_fr: string;
  name_en?: string | null;
  description_fr?: string | null;
  description_en?: string | null;
  price: number;
  enabled: boolean;
  unique: boolean;
  allowed_curriculum: string[];
  related_membership_added_duration?: string | null;
};

export type AppModulesCdrSchemasCdrProductVariantComplete = {
  /**
   * @format uuid
   */
  id: string;
  year: number;
  /**
   * @format uuid
   */
  product_id: string;
  name_fr: string;
  name_en?: string | null;
  description_fr?: string | null;
  description_en?: string | null;
  price: number;
  enabled: boolean;
  unique: boolean;
  allowed_curriculum?: CurriculumComplete[];
  related_membership_added_duration?: string | null;
};

export type AppModulesCdrSchemasCdrProductVariantEdit = {
  name_fr?: string | null;
  name_en?: string | null;
  description_fr?: string | null;
  description_en?: string | null;
  price?: number | null;
  enabled?: boolean | null;
  unique?: boolean | null;
  allowed_curriculum?: string[] | null;
  related_membership_added_duration?: string | null;
};

export type AppModulesCdrSchemasCdrPurchaseBase = {
  quantity: number;
};

export type AppModulesPhonebookSchemasPhonebookMembershipBase = {
  user_id: string;
  association_id: string;
  mandate_year: number;
  role_name: string;
  role_tags?: string | null;
  member_order: number;
};

export type AppModulesSportCompetitionSchemasSportCompetitionPaymentBase = {
  /**
   * @minimum 0
   */
  total: number;
};

export type AppModulesSportCompetitionSchemasSportCompetitionPaymentComplete = {
  /**
   * @minimum 0
   */
  total: number;
  /**
   * @format uuid
   */
  id: string;
  user_id: string;
  /**
   * @format uuid
   */
  edition_id: string;
};

export type AppModulesSportCompetitionSchemasSportCompetitionProductBase = {
  name: string;
  /**
   * @default false
   */
  required?: boolean;
  description?: string | null;
};

export type AppModulesSportCompetitionSchemasSportCompetitionProductComplete = {
  name: string;
  /**
   * @default false
   */
  required?: boolean;
  description?: string | null;
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  edition_id: string;
  variants?: ProductVariant[];
};

export type AppModulesSportCompetitionSchemasSportCompetitionProductEdit = {
  name?: string | null;
  required?: boolean | null;
  description?: string | null;
};

export type AppModulesSportCompetitionSchemasSportCompetitionProductVariantBase =
  {
    /**
     * @format uuid
     */
    product_id: string;
    name: string;
    description?: string | null;
    price: number;
    /**
     * @default true
     */
    enabled?: boolean;
    unique: boolean;
    school_type: ProductSchoolType;
    public_type?: ProductPublicType | null;
  };

export type AppModulesSportCompetitionSchemasSportCompetitionProductVariantComplete =
  {
    /**
     * @format uuid
     */
    product_id: string;
    name: string;
    description?: string | null;
    price: number;
    /**
     * @default true
     */
    enabled?: boolean;
    unique: boolean;
    school_type: ProductSchoolType;
    public_type?: ProductPublicType | null;
    /**
     * @format uuid
     */
    edition_id: string;
    /**
     * @format uuid
     */
    id: string;
    product: Product;
  };

export type AppModulesSportCompetitionSchemasSportCompetitionProductVariantEdit =
  {
    name?: string | null;
    description?: string | null;
    price?: number | null;
    enabled?: boolean | null;
    unique?: boolean | null;
    school_type?: ProductSchoolType | null;
    public_type?: ProductPublicType | null;
  };

export type AppModulesSportCompetitionSchemasSportCompetitionPurchaseBase = {
  /**
   * @format uuid
   */
  product_variant_id: string;
  quantity: number;
};

export type AppTypesStandardResponsesResult = {
  /**
   * @default true
   */
  success?: boolean;
};
